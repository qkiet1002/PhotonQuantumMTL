// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AsteroidsAsteroid))]
  public unsafe partial class AsteroidsAsteroidPrototype : ComponentPrototype<Quantum.AsteroidsAsteroid> {
    public AssetRef<EntityPrototype> ChildAsteroid;
    partial void MaterializeUser(Frame frame, ref Quantum.AsteroidsAsteroid result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AsteroidsAsteroid component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AsteroidsAsteroid result, in PrototypeMaterializationContext context = default) {
        result.ChildAsteroid = this.ChildAsteroid;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AsteroidsPlayerLink))]
  public unsafe partial class AsteroidsPlayerLinkPrototype : ComponentPrototype<Quantum.AsteroidsPlayerLink> {
    public PlayerRef PlayerRef;
    partial void MaterializeUser(Frame frame, ref Quantum.AsteroidsPlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AsteroidsPlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AsteroidsPlayerLink result, in PrototypeMaterializationContext context = default) {
        result.PlayerRef = this.PlayerRef;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AsteroidsProjectile))]
  public unsafe class AsteroidsProjectilePrototype : ComponentPrototype<Quantum.AsteroidsProjectile> {
    public FP TTL;
    public MapEntityId Owner;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AsteroidsProjectile component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AsteroidsProjectile result, in PrototypeMaterializationContext context = default) {
        result.TTL = this.TTL;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AsteroidsShip))]
  public unsafe partial class AsteroidsShipPrototype : ComponentPrototype<Quantum.AsteroidsShip> {
    public FP AmmoCount;
    public FP FireInterval;
    public Int32 Score;
    partial void MaterializeUser(Frame frame, ref Quantum.AsteroidsShip result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AsteroidsShip component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AsteroidsShip result, in PrototypeMaterializationContext context = default) {
        result.AmmoCount = this.AmmoCount;
        result.FireInterval = this.FireInterval;
        result.Score = this.Score;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AsteroidsShipRespawn))]
  public unsafe partial class AsteroidsShipRespawnPrototype : ComponentPrototype<Quantum.AsteroidsShipRespawn> {
    public FP RespawnTimer;
    partial void MaterializeUser(Frame frame, ref Quantum.AsteroidsShipRespawn result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AsteroidsShipRespawn component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AsteroidsShipRespawn result, in PrototypeMaterializationContext context = default) {
        result.RespawnTimer = this.RespawnTimer;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BossBulletInfo))]
  public unsafe class BossBulletInfoPrototype : ComponentPrototype<Quantum.BossBulletInfo> {
    public FP Speed;
    public FP Damage;
    public FPVector2 Direction;
    public MapEntityId Owner;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.BossBulletInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.BossBulletInfo result, in PrototypeMaterializationContext context = default) {
        result.Speed = this.Speed;
        result.Damage = this.Damage;
        result.Direction = this.Direction;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BossInfo))]
  public unsafe partial class BossInfoPrototype : ComponentPrototype<Quantum.BossInfo> {
    public FP Time;
    public FP ChangeDirectionTime;
    public FP UseSkillTime1;
    public FP UseSkillTime2;
    public FP UseSkillTime3;
    public FP UseSkillTime4;
    public FPVector2 Direction;
    public FP Health;
    public FP CurrentHealth;
    public AssetRef<EntityPrototype> Bullet;
    public AssetRef<EntityPrototype> Gif;
    partial void MaterializeUser(Frame frame, ref Quantum.BossInfo result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.BossInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.BossInfo result, in PrototypeMaterializationContext context = default) {
        result.Time = this.Time;
        result.ChangeDirectionTime = this.ChangeDirectionTime;
        result.UseSkillTime1 = this.UseSkillTime1;
        result.UseSkillTime2 = this.UseSkillTime2;
        result.UseSkillTime3 = this.UseSkillTime3;
        result.UseSkillTime4 = this.UseSkillTime4;
        result.Direction = this.Direction;
        result.Health = this.Health;
        result.CurrentHealth = this.CurrentHealth;
        result.Bullet = this.Bullet;
        result.Gif = this.Gif;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BossRBulletInfo))]
  public unsafe class BossRBulletInfoPrototype : ComponentPrototype<Quantum.BossRBulletInfo> {
    public FP Speed;
    public FP Damege;
    public FPVector2 Direction;
    public MapEntityId Owner;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.BossRBulletInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.BossRBulletInfo result, in PrototypeMaterializationContext context = default) {
        result.Speed = this.Speed;
        result.Damege = this.Damege;
        result.Direction = this.Direction;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BossRInfo))]
  public unsafe partial class BossRInfoPrototype : ComponentPrototype<Quantum.BossRInfo> {
    public FP Time;
    public FP ChangeDirectionTime;
    public FP UseSkillTime1;
    public FP UseSkillTime2;
    public FP UseSkillTime3;
    public FP UseSkillTime4;
    public FPVector2 Direction;
    public FP Health;
    public FP CurrentHealth;
    public AssetRef<EntityPrototype> Skill1;
    public AssetRef<EntityPrototype> Skill2;
    public AssetRef<EntityPrototype> Gif;
    public FP IsAttacking;
    partial void MaterializeUser(Frame frame, ref Quantum.BossRInfo result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.BossRInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.BossRInfo result, in PrototypeMaterializationContext context = default) {
        result.Time = this.Time;
        result.ChangeDirectionTime = this.ChangeDirectionTime;
        result.UseSkillTime1 = this.UseSkillTime1;
        result.UseSkillTime2 = this.UseSkillTime2;
        result.UseSkillTime3 = this.UseSkillTime3;
        result.UseSkillTime4 = this.UseSkillTime4;
        result.Direction = this.Direction;
        result.Health = this.Health;
        result.CurrentHealth = this.CurrentHealth;
        result.Skill1 = this.Skill1;
        result.Skill2 = this.Skill2;
        result.Gif = this.Gif;
        result.IsAttacking = this.IsAttacking;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BulletInfo))]
  public unsafe class BulletInfoPrototype : ComponentPrototype<Quantum.BulletInfo> {
    public FPVector2 Direction;
    public FP Damage;
    public MapEntityId Owner;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP Speed;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.BulletInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.BulletInfo result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.Damage = this.Damage;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Facing = this.Facing;
        result.Speed = this.Speed;
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemyInfo))]
  public unsafe partial class EnemyInfoPrototype : ComponentPrototype<Quantum.EnemyInfo> {
    public FP Time;
    public FP Damage;
    public FP ChangeDirectionTime;
    public FP UseSkillTime1;
    public FPVector2 Direction;
    public FP Health;
    public FP CurrentHealth;
    public AssetRef<EntityPrototype> Bullet;
    public AssetRef<EntityPrototype> Gif;
    partial void MaterializeUser(Frame frame, ref Quantum.EnemyInfo result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.EnemyInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.EnemyInfo result, in PrototypeMaterializationContext context = default) {
        result.Time = this.Time;
        result.Damage = this.Damage;
        result.ChangeDirectionTime = this.ChangeDirectionTime;
        result.UseSkillTime1 = this.UseSkillTime1;
        result.Direction = this.Direction;
        result.Health = this.Health;
        result.CurrentHealth = this.CurrentHealth;
        result.Bullet = this.Bullet;
        result.Gif = this.Gif;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.GifInfo))]
  public unsafe partial class GifInfoPrototype : ComponentPrototype<Quantum.GifInfo> {
    public FP HP;
    public FP Damage;
    public FP Speed;
    public FP Exp;
    partial void MaterializeUser(Frame frame, ref Quantum.GifInfo result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.GifInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.GifInfo result, in PrototypeMaterializationContext context = default) {
        result.HP = this.HP;
        result.Damage = this.Damage;
        result.Speed = this.Speed;
        result.Exp = this.Exp;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.HealthIfno))]
  public unsafe partial class HealthIfnoPrototype : ComponentPrototype<Quantum.HealthIfno> {
    public FP Health;
    public FP Quantity;
    partial void MaterializeUser(Frame frame, ref Quantum.HealthIfno result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.HealthIfno component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.HealthIfno result, in PrototypeMaterializationContext context = default) {
        result.Health = this.Health;
        result.Quantity = this.Quantity;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public Button Left;
    public Button Right;
    public Button Up;
    public Button Fire;
    public FPVector2 Direction;
    public Button Attack;
    public Button SpawnBullet;
    public Button Eat;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result.Left = this.Left;
        result.Right = this.Right;
        result.Up = this.Up;
        result.Fire = this.Fire;
        result.Direction = this.Direction;
        result.Attack = this.Attack;
        result.SpawnBullet = this.SpawnBullet;
        result.Eat = this.Eat;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerInfo))]
  public unsafe partial class PlayerInfoPrototype : ComponentPrototype<Quantum.PlayerInfo> {
    public PlayerRef PlayerRef;
    public FP Damage;
    public FP Health;
    public FP CurrentHealth;
    public FP Speed;
    public FP QuantityHP;
    public AssetRef<EntityPrototype> Bullet;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP LV;
    public AssetRef<EntityPrototype> Skill1;
    public AssetRef<EntityPrototype> Skill2;
    public AssetRef<EntityPrototype> Skill3;
    public AssetRef<EntityPrototype> Skill4;
    public AssetRef<EntityPrototype> Skill5;
    public AssetRef<EntityPrototype> Skill6;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerInfo result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerInfo component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerInfo result, in PrototypeMaterializationContext context = default) {
        result.PlayerRef = this.PlayerRef;
        result.Damage = this.Damage;
        result.Health = this.Health;
        result.CurrentHealth = this.CurrentHealth;
        result.Speed = this.Speed;
        result.QuantityHP = this.QuantityHP;
        result.Bullet = this.Bullet;
        result.Facing = this.Facing;
        result.LV = this.LV;
        result.Skill1 = this.Skill1;
        result.Skill2 = this.Skill2;
        result.Skill3 = this.Skill3;
        result.Skill4 = this.Skill4;
        result.Skill5 = this.Skill5;
        result.Skill6 = this.Skill6;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerSkill1Info))]
  public unsafe class PlayerSkill1InfoPrototype : ComponentPrototype<Quantum.PlayerSkill1Info> {
    public FPVector2 Direction;
    public FP Damage;
    public MapEntityId Owner;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP Speed;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerSkill1Info component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerSkill1Info result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.Damage = this.Damage;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Facing = this.Facing;
        result.Speed = this.Speed;
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerSkill2Info))]
  public unsafe class PlayerSkill2InfoPrototype : ComponentPrototype<Quantum.PlayerSkill2Info> {
    public FPVector2 Direction;
    public FP Damage;
    public MapEntityId Owner;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP Speed;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerSkill2Info component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerSkill2Info result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.Damage = this.Damage;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Facing = this.Facing;
        result.Speed = this.Speed;
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerSkill3Info))]
  public unsafe class PlayerSkill3InfoPrototype : ComponentPrototype<Quantum.PlayerSkill3Info> {
    public FPVector2 Direction;
    public FP Damage;
    public MapEntityId Owner;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP Speed;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerSkill3Info component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerSkill3Info result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.Damage = this.Damage;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Facing = this.Facing;
        result.Speed = this.Speed;
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerSkill4Info))]
  public unsafe class PlayerSkill4InfoPrototype : ComponentPrototype<Quantum.PlayerSkill4Info> {
    public FPVector2 Direction;
    public FP Damage;
    public MapEntityId Owner;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP Speed;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerSkill4Info component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerSkill4Info result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.Damage = this.Damage;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Facing = this.Facing;
        result.Speed = this.Speed;
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerSkill5Info))]
  public unsafe class PlayerSkill5InfoPrototype : ComponentPrototype<Quantum.PlayerSkill5Info> {
    public FPVector2 Direction;
    public FP Damage;
    public MapEntityId Owner;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP Speed;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerSkill5Info component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerSkill5Info result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.Damage = this.Damage;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Facing = this.Facing;
        result.Speed = this.Speed;
        result.ExistTime = this.ExistTime;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerSkill6Info))]
  public unsafe class PlayerSkill6InfoPrototype : ComponentPrototype<Quantum.PlayerSkill6Info> {
    public FPVector2 Direction;
    public FP Damage;
    public MapEntityId Owner;
    public Quantum.QEnum32<PlayerFacing> Facing;
    public FP Speed;
    public FP ExistTime;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerSkill6Info component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerSkill6Info result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.Damage = this.Damage;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Facing = this.Facing;
        result.Speed = this.Speed;
        result.ExistTime = this.ExistTime;
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
